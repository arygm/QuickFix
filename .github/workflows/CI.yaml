name: QuickFix CI - Test Runner

# Run the workflow when commits are pushed on main or when a PR is modified
on:
  push:
    branches:
      - main

  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  quickfix-ci:
    name: CI-QuickFix
    runs-on: ubuntu-latest

    env:
      app_name: QuickFixDebug
      FIREBASE_PROJECT_ID: quickfix-1fd34  # Replace with your actual Firebase project ID
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}  # Add this line

    defaults:
      run:
        working-directory: ./${{ env.base_folder }}

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      # Remove current Gradle cache
      - name: Remove current gradle cache
        run: rm -rf ~/.gradle

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      # Setup Node.js and install Firebase CLI
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Retrieve gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # Load google-services.json and local.properties from the secrets
      - name: Decode secrets
        env:
          GOOGLE_SERVICES: ${{ secrets.GOOGLE_SERVICES }}
          LOCAL_PROPERTIES: ${{ secrets.LOCAL_PROPERTIES }}
        run: |
          echo "$GOOGLE_SERVICES" | base64 --decode > ./app/google-services.json
          echo "$LOCAL_PROPERTIES" | base64 --decode > ./local.properties

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: KTFmt Check
        run: ./gradlew ktfmtCheck

      # Build the application
      - name: Assemble
        run: ./gradlew assembleDebug lint --parallel --build-cache

      - name: Run tests
        run: ./gradlew check --parallel --build-cache

      - name: Run instrumentation tests
        id: androidTesting
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 34
          target: google_apis
          arch: x86_64
          avd-name: github
          force-avd-creation: true
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -skin 1080x1920
          disable-animations: true
          script: |
            adb logcat -c                             # Clear logs
            touch app/emulator.log                    # Create log file
            chmod 777 app/emulator.log                # Allow writing to log file
            adb logcat >> app/emulator.log &          # Pipe all logcat messages into log file as a background process

            # Verify Firebase CLI installation
            firebase --version

            firebase emulators:exec --debug --inspect-functions --project $FIREBASE_PROJECT_ID --import=./end2end-data --only firestore,auth './gradlew connectedCheck --parallel --build-cache'
      - name: Upload Failing Test Report Log
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: app/emulator.log

      # Generate coverage report
      - name: Generate coverage
        run: ./gradlew jacocoTestReport

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: Coverage report
          path: app/build/reports/jacoco/jacocoTestReport

      - name: Upload report to Sonar cloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --parallel --build-cache